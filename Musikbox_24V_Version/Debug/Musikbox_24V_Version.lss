
Musikbox_24V_Version.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000924  000009b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000924  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800152  00800152  00000a0a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014b0  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0c  00000000  00000000  00001fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000834  00000000  00000000  000029f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  0000322c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067b  00000000  00000000  00003448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ec  00000000  00000000  00003ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000042af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e5       	ldi	r26, 0x52	; 82
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 36       	cpi	r26, 0x60	; 96
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 01 02 	call	0x402	; 0x402 <main>
  9e:	0c 94 90 04 	jmp	0x920	; 0x920 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_enable>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2e 9a       	sbi	0x05, 6	; 5
  a8:	00 00       	nop
  aa:	2e 98       	cbi	0x05, 6	; 5
  ac:	08 95       	ret

000000ae <lcd_out>:
  ae:	95 b1       	in	r25, 0x05	; 5
  b0:	90 7f       	andi	r25, 0xF0	; 240
  b2:	95 b9       	out	0x05, r25	; 5
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	82 95       	swap	r24
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	98 2b       	or	r25, r24
  bc:	95 b9       	out	0x05, r25	; 5
  be:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_enable>
  c2:	08 95       	ret

000000c4 <lcd_data>:
  c4:	cf 93       	push	r28
  c6:	c8 2f       	mov	r28, r24
  c8:	2d 9a       	sbi	0x05, 5	; 5
  ca:	0e 94 57 00 	call	0xae	; 0xae <lcd_out>
  ce:	8c 2f       	mov	r24, r28
  d0:	82 95       	swap	r24
  d2:	80 7f       	andi	r24, 0xF0	; 240
  d4:	0e 94 57 00 	call	0xae	; 0xae <lcd_out>
  d8:	8f e0       	ldi	r24, 0x0F	; 15
  da:	8a 95       	dec	r24
  dc:	f1 f7       	brne	.-4      	; 0xda <lcd_data+0x16>
  de:	00 00       	nop
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <lcd_command>:
  e4:	cf 93       	push	r28
  e6:	c8 2f       	mov	r28, r24
  e8:	2d 98       	cbi	0x05, 5	; 5
  ea:	0e 94 57 00 	call	0xae	; 0xae <lcd_out>
  ee:	8c 2f       	mov	r24, r28
  f0:	82 95       	swap	r24
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	0e 94 57 00 	call	0xae	; 0xae <lcd_out>
  f8:	8e e0       	ldi	r24, 0x0E	; 14
  fa:	8a 95       	dec	r24
  fc:	f1 f7       	brne	.-4      	; 0xfa <lcd_command+0x16>
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <lcd_clear>:
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_command>
 108:	83 ef       	ldi	r24, 0xF3	; 243
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_clear+0xa>
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_clear+0x10>
 112:	00 00       	nop
 114:	08 95       	ret

00000116 <lcd_init>:
 116:	84 b1       	in	r24, 0x04	; 4
 118:	8f 66       	ori	r24, 0x6F	; 111
 11a:	84 b9       	out	0x04, r24	; 4
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	80 79       	andi	r24, 0x90	; 144
 120:	85 b9       	out	0x05, r24	; 5
 122:	85 ea       	ldi	r24, 0xA5	; 165
 124:	9e e0       	ldi	r25, 0x0E	; 14
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_init+0x10>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_init+0x16>
 12c:	00 00       	nop
 12e:	80 e3       	ldi	r24, 0x30	; 48
 130:	0e 94 57 00 	call	0xae	; 0xae <lcd_out>
 134:	81 ee       	ldi	r24, 0xE1	; 225
 136:	94 e0       	ldi	r25, 0x04	; 4
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_init+0x22>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_init+0x28>
 13e:	00 00       	nop
 140:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_enable>
 144:	89 ef       	ldi	r24, 0xF9	; 249
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcd_init+0x32>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <lcd_init+0x38>
 14e:	00 00       	nop
 150:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_enable>
 154:	89 ef       	ldi	r24, 0xF9	; 249
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_init+0x42>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <lcd_init+0x48>
 15e:	00 00       	nop
 160:	80 e2       	ldi	r24, 0x20	; 32
 162:	0e 94 57 00 	call	0xae	; 0xae <lcd_out>
 166:	81 ee       	ldi	r24, 0xE1	; 225
 168:	94 e0       	ldi	r25, 0x04	; 4
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_init+0x54>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_init+0x5a>
 170:	00 00       	nop
 172:	88 e2       	ldi	r24, 0x28	; 40
 174:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_command>
 178:	8c e0       	ldi	r24, 0x0C	; 12
 17a:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_command>
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_command>
 184:	0e 94 81 00 	call	0x102	; 0x102 <lcd_clear>
 188:	08 95       	ret

0000018a <lcd_setcursor>:
// Setzt den Cursor in Zeile y (0..3) Spalte x (0..15)
 
void lcd_setcursor( uint8_t x, uint8_t y ) {
    uint8_t data;
 
    switch (y) {
 18a:	61 30       	cpi	r22, 0x01	; 1
 18c:	41 f0       	breq	.+16     	; 0x19e <lcd_setcursor+0x14>
 18e:	28 f0       	brcs	.+10     	; 0x19a <lcd_setcursor+0x10>
 190:	62 30       	cpi	r22, 0x02	; 2
 192:	39 f0       	breq	.+14     	; 0x1a2 <lcd_setcursor+0x18>
 194:	63 30       	cpi	r22, 0x03	; 3
 196:	39 f0       	breq	.+14     	; 0x1a6 <lcd_setcursor+0x1c>
 198:	08 95       	ret
        case 0:    // 1. Zeile
            data = LCD_SET_DDADR + LCD_DDADR_LINE1 + x;
 19a:	80 58       	subi	r24, 0x80	; 128
            break;
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <lcd_setcursor+0x1e>
 
        case 1:    // 2. Zeile
            data = LCD_SET_DDADR + LCD_DDADR_LINE2 + x;
 19e:	80 54       	subi	r24, 0x40	; 64
            break;
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <lcd_setcursor+0x1e>
 
        case 2:    // 3. Zeile
            data = LCD_SET_DDADR + LCD_DDADR_LINE3 + x;
 1a2:	80 57       	subi	r24, 0x70	; 112
            break;
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <lcd_setcursor+0x1e>
 
        case 3:    // 4. Zeile
            data = LCD_SET_DDADR + LCD_DDADR_LINE4 + x;
 1a6:	80 53       	subi	r24, 0x30	; 48
 
        default:    
            return; // für den Fall einer falschen Zeile
    }
 
    lcd_command( data );
 1a8:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_command>
 1ac:	08 95       	ret

000001ae <lcd_string>:
}
 
////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD
 
void lcd_string( const char *data ) {
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24
    while( *data != '\0' )
 1b4:	88 81       	ld	r24, Y
 1b6:	88 23       	and	r24, r24
 1b8:	31 f0       	breq	.+12     	; 0x1c6 <lcd_string+0x18>
 1ba:	21 96       	adiw	r28, 0x01	; 1
        lcd_data( *data++ );
 1bc:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_data>
 
////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD
 
void lcd_string( const char *data ) {
    while( *data != '\0' )
 1c0:	89 91       	ld	r24, Y+
 1c2:	81 11       	cpse	r24, r1
 1c4:	fb cf       	rjmp	.-10     	; 0x1bc <lcd_string+0xe>
        lcd_data( *data++ );
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <zero_pole_iir>:
void print_number_to_lcd(float nr, int width, int prec){
	char buffer[16];
	dtostrf(nr, width, prec, buffer);
	lcd_string(buffer);
	
}
 1cc:	8f 92       	push	r8
 1ce:	9f 92       	push	r9
 1d0:	af 92       	push	r10
 1d2:	bf 92       	push	r11
 1d4:	cf 92       	push	r12
 1d6:	df 92       	push	r13
 1d8:	ef 92       	push	r14
 1da:	ff 92       	push	r15
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	ec 01       	movw	r28, r24
 1e2:	4a 01       	movw	r8, r20
 1e4:	5b 01       	movw	r10, r22
 1e6:	24 ea       	ldi	r18, 0xA4	; 164
 1e8:	30 e7       	ldi	r19, 0x70	; 112
 1ea:	4d e7       	ldi	r20, 0x7D	; 125
 1ec:	5f e3       	ldi	r21, 0x3F	; 63
 1ee:	68 81       	ld	r22, Y
 1f0:	79 81       	ldd	r23, Y+1	; 0x01
 1f2:	8a 81       	ldd	r24, Y+2	; 0x02
 1f4:	9b 81       	ldd	r25, Y+3	; 0x03
 1f6:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__mulsf3>
 1fa:	6b 01       	movw	r12, r22
 1fc:	7c 01       	movw	r14, r24
 1fe:	2a e0       	ldi	r18, 0x0A	; 10
 200:	37 ed       	ldi	r19, 0xD7	; 215
 202:	43 e2       	ldi	r20, 0x23	; 35
 204:	5c e3       	ldi	r21, 0x3C	; 60
 206:	c5 01       	movw	r24, r10
 208:	b4 01       	movw	r22, r8
 20a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__mulsf3>
 20e:	9b 01       	movw	r18, r22
 210:	ac 01       	movw	r20, r24
 212:	c7 01       	movw	r24, r14
 214:	b6 01       	movw	r22, r12
 216:	0e 94 01 03 	call	0x602	; 0x602 <__addsf3>
 21a:	68 83       	st	Y, r22
 21c:	79 83       	std	Y+1, r23	; 0x01
 21e:	8a 83       	std	Y+2, r24	; 0x02
 220:	9b 83       	std	Y+3, r25	; 0x03
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	ff 90       	pop	r15
 228:	ef 90       	pop	r14
 22a:	df 90       	pop	r13
 22c:	cf 90       	pop	r12
 22e:	bf 90       	pop	r11
 230:	af 90       	pop	r10
 232:	9f 90       	pop	r9
 234:	8f 90       	pop	r8
 236:	08 95       	ret

00000238 <config_io>:
 238:	3c 9a       	sbi	0x07, 4	; 7
 23a:	55 9a       	sbi	0x0a, 5	; 10
 23c:	27 9a       	sbi	0x04, 7	; 4
 23e:	56 9a       	sbi	0x0a, 6	; 10
 240:	24 9a       	sbi	0x04, 4	; 4
 242:	51 9a       	sbi	0x0a, 1	; 10
 244:	52 98       	cbi	0x0a, 2	; 10
 246:	48 98       	cbi	0x09, 0	; 9
 248:	e4 e5       	ldi	r30, 0x54	; 84
 24a:	f1 e0       	ldi	r31, 0x01	; 1
 24c:	11 82       	std	Z+1, r1	; 0x01
 24e:	10 82       	st	Z, r1
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	93 83       	std	Z+3, r25	; 0x03
 256:	82 83       	std	Z+2, r24	; 0x02
 258:	08 95       	ret

0000025a <set_ADC_channel>:

void set_ADC_channel(int channel){
 25a:	ac 01       	movw	r20, r24
	ADMUX &= ~(0x0F << MUX0);
 25c:	ec e7       	ldi	r30, 0x7C	; 124
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	90 81       	ld	r25, Z
 262:	90 7f       	andi	r25, 0xF0	; 240
 264:	90 83       	st	Z, r25
	ADMUX |= ((channel % 6) << MUX0);
 266:	20 81       	ld	r18, Z
 268:	ca 01       	movw	r24, r20
 26a:	66 e0       	ldi	r22, 0x06	; 6
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__divmodhi4>
 272:	82 2b       	or	r24, r18
 274:	80 83       	st	Z, r24
 276:	08 95       	ret

00000278 <read_ADC>:
		_delay_ms(10);
			
    }
}

void read_ADC(){
 278:	af 92       	push	r10
 27a:	bf 92       	push	r11
 27c:	cf 92       	push	r12
 27e:	df 92       	push	r13
 280:	ef 92       	push	r14
 282:	ff 92       	push	r15
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	0f 2e       	mov	r0, r31
 28e:	f6 e0       	ldi	r31, 0x06	; 6
 290:	af 2e       	mov	r10, r31
 292:	b1 2c       	mov	r11, r1
 294:	f0 2d       	mov	r31, r0
	//iterate over all ADC channels
	for (int i=0; i<ADC_NUM_OF_CHANNELS; i++)
	{
		//start of conversion
		ADCSRA |= (1 << ADSC);
 296:	0a e7       	ldi	r16, 0x7A	; 122
 298:	10 e0       	ldi	r17, 0x00	; 0
					break;
				case ADC_PINS_U_CHRG_CTR1:
					f_u_chrg_ctr1_last = ADC*GAIN_CHARGE_CTR1_U;
					break;				
				case ADC_PINS_I_AKKU0:
					f_i_akku0_last = ADC * GAIN_AKKU0_I;
 29a:	0f 2e       	mov	r0, r31
 29c:	f8 e7       	ldi	r31, 0x78	; 120
 29e:	cf 2e       	mov	r12, r31
 2a0:	d1 2c       	mov	r13, r1
 2a2:	f0 2d       	mov	r31, r0
					break;
				default:
					break;
			}
			//next channel
			cur_adc_chn = (cur_adc_chn+1) % ADC_NUM_OF_CHANNELS;
 2a4:	0f 2e       	mov	r0, r31
 2a6:	f6 e0       	ldi	r31, 0x06	; 6
 2a8:	ef 2e       	mov	r14, r31
 2aa:	f1 2c       	mov	r15, r1
 2ac:	f0 2d       	mov	r31, r0
void read_ADC(){
	//iterate over all ADC channels
	for (int i=0; i<ADC_NUM_OF_CHANNELS; i++)
	{
		//start of conversion
		ADCSRA |= (1 << ADSC);
 2ae:	f8 01       	movw	r30, r16
 2b0:	80 81       	ld	r24, Z
 2b2:	80 64       	ori	r24, 0x40	; 64
 2b4:	80 83       	st	Z, r24
	
		//wait until EOC
		while ((ADCSRA & (1<<ADSC)) != 0){
 2b6:	80 81       	ld	r24, Z
 2b8:	86 ff       	sbrs	r24, 6
 2ba:	93 c0       	rjmp	.+294    	; 0x3e2 <read_ADC+0x16a>
			switch(cur_adc_chn){
 2bc:	c0 91 52 01 	lds	r28, 0x0152	; 0x800152 <__data_end>
 2c0:	d0 91 53 01 	lds	r29, 0x0153	; 0x800153 <__data_end+0x1>
 2c4:	c2 30       	cpi	r28, 0x02	; 2
 2c6:	d1 05       	cpc	r29, r1
 2c8:	f1 f1       	breq	.+124    	; 0x346 <read_ADC+0xce>
 2ca:	34 f4       	brge	.+12     	; 0x2d8 <read_ADC+0x60>
 2cc:	20 97       	sbiw	r28, 0x00	; 0
 2ce:	79 f0       	breq	.+30     	; 0x2ee <read_ADC+0x76>
 2d0:	c1 30       	cpi	r28, 0x01	; 1
 2d2:	d1 05       	cpc	r29, r1
 2d4:	11 f1       	breq	.+68     	; 0x31a <read_ADC+0xa2>
 2d6:	76 c0       	rjmp	.+236    	; 0x3c4 <read_ADC+0x14c>
 2d8:	c4 30       	cpi	r28, 0x04	; 4
 2da:	d1 05       	cpc	r29, r1
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <read_ADC+0x68>
 2de:	53 c0       	rjmp	.+166    	; 0x386 <read_ADC+0x10e>
 2e0:	0c f4       	brge	.+2      	; 0x2e4 <read_ADC+0x6c>
 2e2:	41 c0       	rjmp	.+130    	; 0x366 <read_ADC+0xee>
 2e4:	c5 30       	cpi	r28, 0x05	; 5
 2e6:	d1 05       	cpc	r29, r1
 2e8:	09 f4       	brne	.+2      	; 0x2ec <read_ADC+0x74>
 2ea:	5d c0       	rjmp	.+186    	; 0x3a6 <read_ADC+0x12e>
 2ec:	6b c0       	rjmp	.+214    	; 0x3c4 <read_ADC+0x14c>
				case ADC_PINS_U_24_V_POWER:
					f_u_24v_power_last = ADC*GAIN_POWER_24_U;
 2ee:	f6 01       	movw	r30, r12
 2f0:	60 81       	ld	r22, Z
 2f2:	71 81       	ldd	r23, Z+1	; 0x01
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 6d 03 	call	0x6da	; 0x6da <__floatunsisf>
 2fc:	2c e6       	ldi	r18, 0x6C	; 108
 2fe:	35 e8       	ldi	r19, 0x85	; 133
 300:	44 ef       	ldi	r20, 0xF4	; 244
 302:	5c e3       	ldi	r21, 0x3C	; 60
 304:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__mulsf3>
 308:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <f_u_24v_power_last>
 30c:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <f_u_24v_power_last+0x1>
 310:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <f_u_24v_power_last+0x2>
 314:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <f_u_24v_power_last+0x3>
					break;
 318:	55 c0       	rjmp	.+170    	; 0x3c4 <read_ADC+0x14c>
				case ADC_PINS_U_12_V_POWER:
					f_u_24v_power_last = ADC*GAIN_POWER_12_U;
 31a:	f6 01       	movw	r30, r12
 31c:	60 81       	ld	r22, Z
 31e:	71 81       	ldd	r23, Z+1	; 0x01
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 6d 03 	call	0x6da	; 0x6da <__floatunsisf>
 328:	22 e0       	ldi	r18, 0x02	; 2
 32a:	3f e2       	ldi	r19, 0x2F	; 47
 32c:	46 e6       	ldi	r20, 0x66	; 102
 32e:	5c e3       	ldi	r21, 0x3C	; 60
 330:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__mulsf3>
 334:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <f_u_24v_power_last>
 338:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <f_u_24v_power_last+0x1>
 33c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <f_u_24v_power_last+0x2>
 340:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <f_u_24v_power_last+0x3>
					break;
 344:	3f c0       	rjmp	.+126    	; 0x3c4 <read_ADC+0x14c>
				case ADC_PINS_U_CHRG_CTR0:
					f_u_chrg_ctr0_last = ADC*GAIN_CHARGE_CTR0_U;
 346:	f6 01       	movw	r30, r12
 348:	60 81       	ld	r22, Z
 34a:	71 81       	ldd	r23, Z+1	; 0x01
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 6d 03 	call	0x6da	; 0x6da <__floatunsisf>
 354:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <f_u_chrg_ctr0_last>
 358:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <f_u_chrg_ctr0_last+0x1>
 35c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <f_u_chrg_ctr0_last+0x2>
 360:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <f_u_chrg_ctr0_last+0x3>
					break;
 364:	2f c0       	rjmp	.+94     	; 0x3c4 <read_ADC+0x14c>
				case ADC_PINS_U_CHRG_CTR1:
					f_u_chrg_ctr1_last = ADC*GAIN_CHARGE_CTR1_U;
 366:	f6 01       	movw	r30, r12
 368:	60 81       	ld	r22, Z
 36a:	71 81       	ldd	r23, Z+1	; 0x01
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 6d 03 	call	0x6da	; 0x6da <__floatunsisf>
 374:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <f_u_chrg_ctr1_last>
 378:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <f_u_chrg_ctr1_last+0x1>
 37c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <f_u_chrg_ctr1_last+0x2>
 380:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <f_u_chrg_ctr1_last+0x3>
					break;				
 384:	1f c0       	rjmp	.+62     	; 0x3c4 <read_ADC+0x14c>
				case ADC_PINS_I_AKKU0:
					f_i_akku0_last = ADC * GAIN_AKKU0_I;
 386:	f6 01       	movw	r30, r12
 388:	60 81       	ld	r22, Z
 38a:	71 81       	ldd	r23, Z+1	; 0x01
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 6d 03 	call	0x6da	; 0x6da <__floatunsisf>
 394:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <f_i_akku0_last>
 398:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <f_i_akku0_last+0x1>
 39c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <f_i_akku0_last+0x2>
 3a0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <f_i_akku0_last+0x3>
					break;
 3a4:	0f c0       	rjmp	.+30     	; 0x3c4 <read_ADC+0x14c>
				case ADC_PINS_I_AKKU1:
					f_i_akku1_last = ADC * GAIN_AKKU1_I;
 3a6:	f6 01       	movw	r30, r12
 3a8:	60 81       	ld	r22, Z
 3aa:	71 81       	ldd	r23, Z+1	; 0x01
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 6d 03 	call	0x6da	; 0x6da <__floatunsisf>
 3b4:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <f_i_akku1_last>
 3b8:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <f_i_akku1_last+0x1>
 3bc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <f_i_akku1_last+0x2>
 3c0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <f_i_akku1_last+0x3>
					break;
				default:
					break;
			}
			//next channel
			cur_adc_chn = (cur_adc_chn+1) % ADC_NUM_OF_CHANNELS;
 3c4:	ce 01       	movw	r24, r28
 3c6:	01 96       	adiw	r24, 0x01	; 1
 3c8:	b7 01       	movw	r22, r14
 3ca:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__divmodhi4>
 3ce:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__data_end+0x1>
 3d2:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
			set_ADC_channel(cur_adc_chn);
 3d6:	0e 94 2d 01 	call	0x25a	; 0x25a <set_ADC_channel>
	{
		//start of conversion
		ADCSRA |= (1 << ADSC);
	
		//wait until EOC
		while ((ADCSRA & (1<<ADSC)) != 0){
 3da:	f8 01       	movw	r30, r16
 3dc:	80 81       	ld	r24, Z
 3de:	86 fd       	sbrc	r24, 6
 3e0:	6d cf       	rjmp	.-294    	; 0x2bc <read_ADC+0x44>
 3e2:	f1 e0       	ldi	r31, 0x01	; 1
 3e4:	af 1a       	sub	r10, r31
 3e6:	b1 08       	sbc	r11, r1
    }
}

void read_ADC(){
	//iterate over all ADC channels
	for (int i=0; i<ADC_NUM_OF_CHANNELS; i++)
 3e8:	09 f0       	breq	.+2      	; 0x3ec <read_ADC+0x174>
 3ea:	61 cf       	rjmp	.-318    	; 0x2ae <read_ADC+0x36>
			//next channel
			cur_adc_chn = (cur_adc_chn+1) % ADC_NUM_OF_CHANNELS;
			set_ADC_channel(cur_adc_chn);
		}	
	}
}
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	ff 90       	pop	r15
 3f6:	ef 90       	pop	r14
 3f8:	df 90       	pop	r13
 3fa:	cf 90       	pop	r12
 3fc:	bf 90       	pop	r11
 3fe:	af 90       	pop	r10
 400:	08 95       	ret

00000402 <main>:
int adc_channel_map[ADC_NUM_OF_CHANNELS];

int main(void)
{
	//power saving
	PRR |= (1<<PRTWI) | (1<<PRSPI) | (1<<PRUSART0);
 402:	e4 e6       	ldi	r30, 0x64	; 100
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	86 68       	ori	r24, 0x86	; 134
 40a:	80 83       	st	Z, r24
	
	//config pins
	config_io();
 40c:	0e 94 1c 01 	call	0x238	; 0x238 <config_io>
 410:	87 ea       	ldi	r24, 0xA7	; 167
 412:	91 e6       	ldi	r25, 0x61	; 97
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <main+0x12>
 418:	00 c0       	rjmp	.+0      	; 0x41a <main+0x18>
 41a:	00 00       	nop

	//delay needed to prevent re-switching on
	_delay_ms(100);	
	PORTD |= (1<<SHDN_OUT_PIN);
 41c:	5c 9a       	sbi	0x0b, 4	; 11
 41e:	e3 ef       	ldi	r30, 0xF3	; 243
 420:	f1 e0       	ldi	r31, 0x01	; 1
 422:	31 97       	sbiw	r30, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <main+0x20>
 426:	00 c0       	rjmp	.+0      	; 0x428 <main+0x26>
 428:	00 00       	nop
	_delay_ms(2);
			
	//automatic switching to mains if mains is connected, good?
	POWER_RELAY_OUT_PORT |= (1 << POWER_RELAY_OUT_PIN);
 42a:	5d 9a       	sbi	0x0b, 5	; 11
	
	ADC_ENABLE_OUT_PORT |= (1 << ADC_ENABLE_OUT_PIN);
 42c:	2f 9a       	sbi	0x05, 7	; 5
	AKKU_RELAY_OUT_PORT |= (1 << AKKU_RELAY_OUT_PIN);
 42e:	5e 9a       	sbi	0x0b, 6	; 11
	
	
	LCD_POWER_OUT_PORT	|= (1<<LCD_POWER_OUT_PIN);
 430:	2c 9a       	sbi	0x05, 4	; 5
	lcd_init();    
 432:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_init>
	lcd_clear();
 436:	0e 94 81 00 	call	0x102	; 0x102 <lcd_clear>
	lcd_setcursor(0,0);
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_setcursor>
	lcd_string("    WELCOME!    ");
 442:	80 e3       	ldi	r24, 0x30	; 48
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_string>
	lcd_setcursor(0,1);
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_setcursor>
	lcd_string(" Kris ist super "); 
 452:	81 e4       	ldi	r24, 0x41	; 65
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_string>
	             
	 
	//ADC config
	//reference to 3.3V VCC
	ADMUX |= (1 << REFS0);	
 45a:	ec e7       	ldi	r30, 0x7C	; 124
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z
 460:	80 64       	ori	r24, 0x40	; 64
 462:	80 83       	st	Z, r24
	//prescaling ADC and initilization
	ADCSRA |= (0 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADSC) | (1 << ADEN);
 464:	ea e7       	ldi	r30, 0x7A	; 122
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	83 6c       	ori	r24, 0xC3	; 195
 46c:	80 83       	st	Z, r24
	//read all channels
	read_ADC();
 46e:	0e 94 3c 01 	call	0x278	; 0x278 <read_ADC>
	
	f_u_24v_power_avg = f_u_24v_power_last;
 472:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <f_u_24v_power_last>
 476:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <f_u_24v_power_last+0x1>
 47a:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <f_u_24v_power_last+0x2>
 47e:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <f_u_24v_power_last+0x3>
 482:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <f_u_24v_power_avg>
 486:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <f_u_24v_power_avg+0x1>
 48a:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <f_u_24v_power_avg+0x2>
 48e:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <f_u_24v_power_avg+0x3>
	f_u_12v_power_avg = f_u_12v_power_last;
 492:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <f_u_12v_power_last>
 496:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <f_u_12v_power_last+0x1>
 49a:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <f_u_12v_power_last+0x2>
 49e:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <f_u_12v_power_last+0x3>
 4a2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <f_u_12v_power_avg>
 4a6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <f_u_12v_power_avg+0x1>
 4aa:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <f_u_12v_power_avg+0x2>
 4ae:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <f_u_12v_power_avg+0x3>
	f_u_chrg_ctr0_avg = f_u_chrg_ctr0_last;
 4b2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <f_u_chrg_ctr0_last>
 4b6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <f_u_chrg_ctr0_last+0x1>
 4ba:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <f_u_chrg_ctr0_last+0x2>
 4be:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <f_u_chrg_ctr0_last+0x3>
 4c2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <f_u_chrg_ctr0_avg>
 4c6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <f_u_chrg_ctr0_avg+0x1>
 4ca:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <f_u_chrg_ctr0_avg+0x2>
 4ce:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <f_u_chrg_ctr0_avg+0x3>
	f_u_chrg_ctr1_avg = f_u_chrg_ctr1_last;
 4d2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <f_u_chrg_ctr1_last>
 4d6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <f_u_chrg_ctr1_last+0x1>
 4da:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <f_u_chrg_ctr1_last+0x2>
 4de:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <f_u_chrg_ctr1_last+0x3>
 4e2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <f_u_chrg_ctr1_avg>
 4e6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <f_u_chrg_ctr1_avg+0x1>
 4ea:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <f_u_chrg_ctr1_avg+0x2>
 4ee:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <f_u_chrg_ctr1_avg+0x3>
	f_i_akku0_avg	  = f_i_akku0_last;
 4f2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <f_i_akku0_last>
 4f6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <f_i_akku0_last+0x1>
 4fa:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <f_i_akku0_last+0x2>
 4fe:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <f_i_akku0_last+0x3>
 502:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <f_i_akku0_avg>
 506:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <f_i_akku0_avg+0x1>
 50a:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <f_i_akku0_avg+0x2>
 50e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <f_i_akku0_avg+0x3>
	f_i_akku1_avg     = f_i_akku1_last;
 512:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <f_i_akku1_last>
 516:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <f_i_akku1_last+0x1>
 51a:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <f_i_akku1_last+0x2>
 51e:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <f_i_akku1_last+0x3>
 522:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 526:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 52a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 52e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	
    while (1) 
    {
		
		//shut off logic
		int k=0;
 532:	d0 e0       	ldi	r29, 0x00	; 0
 534:	c0 e0       	ldi	r28, 0x00	; 0
 536:	8d 2f       	mov	r24, r29
 538:	9c 2f       	mov	r25, r28
		while(ONOFF_BUTTON_IN_PORT & (1<<ONOFF_BUTTON_IN_PIN)){
 53a:	0f c0       	rjmp	.+30     	; 0x55a <main+0x158>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53c:	f1 e2       	ldi	r31, 0x21	; 33
 53e:	fa 95       	dec	r31
 540:	f1 f7       	brne	.-4      	; 0x53e <main+0x13c>
 542:	00 00       	nop
			//debouncing
			_delay_us(100);
			k++;
 544:	01 96       	adiw	r24, 0x01	; 1
			if(k==100){
 546:	84 36       	cpi	r24, 0x64	; 100
 548:	91 05       	cpc	r25, r1
 54a:	39 f4       	brne	.+14     	; 0x55a <main+0x158>
				//shut down
				PORTD &= ~(1<<SHDN_OUT_PIN);
 54c:	5c 98       	cbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54e:	e7 ea       	ldi	r30, 0xA7	; 167
 550:	f1 e6       	ldi	r31, 0x61	; 97
 552:	31 97       	sbiw	r30, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <main+0x150>
 556:	00 c0       	rjmp	.+0      	; 0x558 <main+0x156>
 558:	00 00       	nop
    while (1) 
    {
		
		//shut off logic
		int k=0;
		while(ONOFF_BUTTON_IN_PORT & (1<<ONOFF_BUTTON_IN_PIN)){
 55a:	4a 99       	sbic	0x09, 2	; 9
 55c:	ef cf       	rjmp	.-34     	; 0x53c <main+0x13a>
				PORTD &= ~(1<<SHDN_OUT_PIN);
				_delay_ms(100);
			}
		}			
		
		read_ADC();
 55e:	0e 94 3c 01 	call	0x278	; 0x278 <read_ADC>
		zero_pole_iir(&f_u_12v_power_avg, f_u_12v_power_last);
 562:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <f_u_12v_power_last>
 566:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <f_u_12v_power_last+0x1>
 56a:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <f_u_12v_power_last+0x2>
 56e:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <f_u_12v_power_last+0x3>
 572:	80 e1       	ldi	r24, 0x10	; 16
 574:	91 e0       	ldi	r25, 0x01	; 1
 576:	0e 94 e6 00 	call	0x1cc	; 0x1cc <zero_pole_iir>
		zero_pole_iir(&f_u_24v_power_avg, f_u_24v_power_last);
 57a:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <f_u_24v_power_last>
 57e:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <f_u_24v_power_last+0x1>
 582:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <f_u_24v_power_last+0x2>
 586:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <f_u_24v_power_last+0x3>
 58a:	84 e1       	ldi	r24, 0x14	; 20
 58c:	91 e0       	ldi	r25, 0x01	; 1
 58e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <zero_pole_iir>
		zero_pole_iir(&f_u_chrg_ctr0_avg, f_u_chrg_ctr0_last);
 592:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <f_u_chrg_ctr0_last>
 596:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <f_u_chrg_ctr0_last+0x1>
 59a:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <f_u_chrg_ctr0_last+0x2>
 59e:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <f_u_chrg_ctr0_last+0x3>
 5a2:	8c e0       	ldi	r24, 0x0C	; 12
 5a4:	91 e0       	ldi	r25, 0x01	; 1
 5a6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <zero_pole_iir>
		zero_pole_iir(&f_u_chrg_ctr1_avg, f_u_chrg_ctr1_last);
 5aa:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <f_u_chrg_ctr1_last>
 5ae:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <f_u_chrg_ctr1_last+0x1>
 5b2:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <f_u_chrg_ctr1_last+0x2>
 5b6:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <f_u_chrg_ctr1_last+0x3>
 5ba:	88 e0       	ldi	r24, 0x08	; 8
 5bc:	91 e0       	ldi	r25, 0x01	; 1
 5be:	0e 94 e6 00 	call	0x1cc	; 0x1cc <zero_pole_iir>
		zero_pole_iir(&f_i_akku0_avg,	  f_i_akku0_last);
 5c2:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <f_i_akku0_last>
 5c6:	50 91 1d 01 	lds	r21, 0x011D	; 0x80011d <f_i_akku0_last+0x1>
 5ca:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <f_i_akku0_last+0x2>
 5ce:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <f_i_akku0_last+0x3>
 5d2:	84 e0       	ldi	r24, 0x04	; 4
 5d4:	91 e0       	ldi	r25, 0x01	; 1
 5d6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <zero_pole_iir>
		zero_pole_iir(&f_i_akku1_avg,	  f_i_akku1_last);
 5da:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <f_i_akku1_last>
 5de:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <f_i_akku1_last+0x1>
 5e2:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <f_i_akku1_last+0x2>
 5e6:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <f_i_akku1_last+0x3>
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	91 e0       	ldi	r25, 0x01	; 1
 5ee:	0e 94 e6 00 	call	0x1cc	; 0x1cc <zero_pole_iir>
 5f2:	83 ec       	ldi	r24, 0xC3	; 195
 5f4:	99 e0       	ldi	r25, 0x09	; 9
 5f6:	01 97       	sbiw	r24, 0x01	; 1
 5f8:	f1 f7       	brne	.-4      	; 0x5f6 <main+0x1f4>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <main+0x1fa>
 5fc:	00 00       	nop
 5fe:	9b cf       	rjmp	.-202    	; 0x536 <main+0x134>

00000600 <__subsf3>:
 600:	50 58       	subi	r21, 0x80	; 128

00000602 <__addsf3>:
 602:	bb 27       	eor	r27, r27
 604:	aa 27       	eor	r26, r26
 606:	0e 94 18 03 	call	0x630	; 0x630 <__addsf3x>
 60a:	0c 94 c1 03 	jmp	0x782	; 0x782 <__fp_round>
 60e:	0e 94 b3 03 	call	0x766	; 0x766 <__fp_pscA>
 612:	38 f0       	brcs	.+14     	; 0x622 <__addsf3+0x20>
 614:	0e 94 ba 03 	call	0x774	; 0x774 <__fp_pscB>
 618:	20 f0       	brcs	.+8      	; 0x622 <__addsf3+0x20>
 61a:	39 f4       	brne	.+14     	; 0x62a <__addsf3+0x28>
 61c:	9f 3f       	cpi	r25, 0xFF	; 255
 61e:	19 f4       	brne	.+6      	; 0x626 <__addsf3+0x24>
 620:	26 f4       	brtc	.+8      	; 0x62a <__addsf3+0x28>
 622:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_nan>
 626:	0e f4       	brtc	.+2      	; 0x62a <__addsf3+0x28>
 628:	e0 95       	com	r30
 62a:	e7 fb       	bst	r30, 7
 62c:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_inf>

00000630 <__addsf3x>:
 630:	e9 2f       	mov	r30, r25
 632:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__fp_split3>
 636:	58 f3       	brcs	.-42     	; 0x60e <__addsf3+0xc>
 638:	ba 17       	cp	r27, r26
 63a:	62 07       	cpc	r22, r18
 63c:	73 07       	cpc	r23, r19
 63e:	84 07       	cpc	r24, r20
 640:	95 07       	cpc	r25, r21
 642:	20 f0       	brcs	.+8      	; 0x64c <__addsf3x+0x1c>
 644:	79 f4       	brne	.+30     	; 0x664 <__addsf3x+0x34>
 646:	a6 f5       	brtc	.+104    	; 0x6b0 <__addsf3x+0x80>
 648:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__fp_zero>
 64c:	0e f4       	brtc	.+2      	; 0x650 <__addsf3x+0x20>
 64e:	e0 95       	com	r30
 650:	0b 2e       	mov	r0, r27
 652:	ba 2f       	mov	r27, r26
 654:	a0 2d       	mov	r26, r0
 656:	0b 01       	movw	r0, r22
 658:	b9 01       	movw	r22, r18
 65a:	90 01       	movw	r18, r0
 65c:	0c 01       	movw	r0, r24
 65e:	ca 01       	movw	r24, r20
 660:	a0 01       	movw	r20, r0
 662:	11 24       	eor	r1, r1
 664:	ff 27       	eor	r31, r31
 666:	59 1b       	sub	r21, r25
 668:	99 f0       	breq	.+38     	; 0x690 <__addsf3x+0x60>
 66a:	59 3f       	cpi	r21, 0xF9	; 249
 66c:	50 f4       	brcc	.+20     	; 0x682 <__addsf3x+0x52>
 66e:	50 3e       	cpi	r21, 0xE0	; 224
 670:	68 f1       	brcs	.+90     	; 0x6cc <__addsf3x+0x9c>
 672:	1a 16       	cp	r1, r26
 674:	f0 40       	sbci	r31, 0x00	; 0
 676:	a2 2f       	mov	r26, r18
 678:	23 2f       	mov	r18, r19
 67a:	34 2f       	mov	r19, r20
 67c:	44 27       	eor	r20, r20
 67e:	58 5f       	subi	r21, 0xF8	; 248
 680:	f3 cf       	rjmp	.-26     	; 0x668 <__addsf3x+0x38>
 682:	46 95       	lsr	r20
 684:	37 95       	ror	r19
 686:	27 95       	ror	r18
 688:	a7 95       	ror	r26
 68a:	f0 40       	sbci	r31, 0x00	; 0
 68c:	53 95       	inc	r21
 68e:	c9 f7       	brne	.-14     	; 0x682 <__addsf3x+0x52>
 690:	7e f4       	brtc	.+30     	; 0x6b0 <__addsf3x+0x80>
 692:	1f 16       	cp	r1, r31
 694:	ba 0b       	sbc	r27, r26
 696:	62 0b       	sbc	r22, r18
 698:	73 0b       	sbc	r23, r19
 69a:	84 0b       	sbc	r24, r20
 69c:	ba f0       	brmi	.+46     	; 0x6cc <__addsf3x+0x9c>
 69e:	91 50       	subi	r25, 0x01	; 1
 6a0:	a1 f0       	breq	.+40     	; 0x6ca <__addsf3x+0x9a>
 6a2:	ff 0f       	add	r31, r31
 6a4:	bb 1f       	adc	r27, r27
 6a6:	66 1f       	adc	r22, r22
 6a8:	77 1f       	adc	r23, r23
 6aa:	88 1f       	adc	r24, r24
 6ac:	c2 f7       	brpl	.-16     	; 0x69e <__addsf3x+0x6e>
 6ae:	0e c0       	rjmp	.+28     	; 0x6cc <__addsf3x+0x9c>
 6b0:	ba 0f       	add	r27, r26
 6b2:	62 1f       	adc	r22, r18
 6b4:	73 1f       	adc	r23, r19
 6b6:	84 1f       	adc	r24, r20
 6b8:	48 f4       	brcc	.+18     	; 0x6cc <__addsf3x+0x9c>
 6ba:	87 95       	ror	r24
 6bc:	77 95       	ror	r23
 6be:	67 95       	ror	r22
 6c0:	b7 95       	ror	r27
 6c2:	f7 95       	ror	r31
 6c4:	9e 3f       	cpi	r25, 0xFE	; 254
 6c6:	08 f0       	brcs	.+2      	; 0x6ca <__addsf3x+0x9a>
 6c8:	b0 cf       	rjmp	.-160    	; 0x62a <__addsf3+0x28>
 6ca:	93 95       	inc	r25
 6cc:	88 0f       	add	r24, r24
 6ce:	08 f0       	brcs	.+2      	; 0x6d2 <__addsf3x+0xa2>
 6d0:	99 27       	eor	r25, r25
 6d2:	ee 0f       	add	r30, r30
 6d4:	97 95       	ror	r25
 6d6:	87 95       	ror	r24
 6d8:	08 95       	ret

000006da <__floatunsisf>:
 6da:	e8 94       	clt
 6dc:	09 c0       	rjmp	.+18     	; 0x6f0 <__floatsisf+0x12>

000006de <__floatsisf>:
 6de:	97 fb       	bst	r25, 7
 6e0:	3e f4       	brtc	.+14     	; 0x6f0 <__floatsisf+0x12>
 6e2:	90 95       	com	r25
 6e4:	80 95       	com	r24
 6e6:	70 95       	com	r23
 6e8:	61 95       	neg	r22
 6ea:	7f 4f       	sbci	r23, 0xFF	; 255
 6ec:	8f 4f       	sbci	r24, 0xFF	; 255
 6ee:	9f 4f       	sbci	r25, 0xFF	; 255
 6f0:	99 23       	and	r25, r25
 6f2:	a9 f0       	breq	.+42     	; 0x71e <__floatsisf+0x40>
 6f4:	f9 2f       	mov	r31, r25
 6f6:	96 e9       	ldi	r25, 0x96	; 150
 6f8:	bb 27       	eor	r27, r27
 6fa:	93 95       	inc	r25
 6fc:	f6 95       	lsr	r31
 6fe:	87 95       	ror	r24
 700:	77 95       	ror	r23
 702:	67 95       	ror	r22
 704:	b7 95       	ror	r27
 706:	f1 11       	cpse	r31, r1
 708:	f8 cf       	rjmp	.-16     	; 0x6fa <__floatsisf+0x1c>
 70a:	fa f4       	brpl	.+62     	; 0x74a <__floatsisf+0x6c>
 70c:	bb 0f       	add	r27, r27
 70e:	11 f4       	brne	.+4      	; 0x714 <__floatsisf+0x36>
 710:	60 ff       	sbrs	r22, 0
 712:	1b c0       	rjmp	.+54     	; 0x74a <__floatsisf+0x6c>
 714:	6f 5f       	subi	r22, 0xFF	; 255
 716:	7f 4f       	sbci	r23, 0xFF	; 255
 718:	8f 4f       	sbci	r24, 0xFF	; 255
 71a:	9f 4f       	sbci	r25, 0xFF	; 255
 71c:	16 c0       	rjmp	.+44     	; 0x74a <__floatsisf+0x6c>
 71e:	88 23       	and	r24, r24
 720:	11 f0       	breq	.+4      	; 0x726 <__floatsisf+0x48>
 722:	96 e9       	ldi	r25, 0x96	; 150
 724:	11 c0       	rjmp	.+34     	; 0x748 <__floatsisf+0x6a>
 726:	77 23       	and	r23, r23
 728:	21 f0       	breq	.+8      	; 0x732 <__floatsisf+0x54>
 72a:	9e e8       	ldi	r25, 0x8E	; 142
 72c:	87 2f       	mov	r24, r23
 72e:	76 2f       	mov	r23, r22
 730:	05 c0       	rjmp	.+10     	; 0x73c <__floatsisf+0x5e>
 732:	66 23       	and	r22, r22
 734:	71 f0       	breq	.+28     	; 0x752 <__floatsisf+0x74>
 736:	96 e8       	ldi	r25, 0x86	; 134
 738:	86 2f       	mov	r24, r22
 73a:	70 e0       	ldi	r23, 0x00	; 0
 73c:	60 e0       	ldi	r22, 0x00	; 0
 73e:	2a f0       	brmi	.+10     	; 0x74a <__floatsisf+0x6c>
 740:	9a 95       	dec	r25
 742:	66 0f       	add	r22, r22
 744:	77 1f       	adc	r23, r23
 746:	88 1f       	adc	r24, r24
 748:	da f7       	brpl	.-10     	; 0x740 <__floatsisf+0x62>
 74a:	88 0f       	add	r24, r24
 74c:	96 95       	lsr	r25
 74e:	87 95       	ror	r24
 750:	97 f9       	bld	r25, 7
 752:	08 95       	ret

00000754 <__fp_inf>:
 754:	97 f9       	bld	r25, 7
 756:	9f 67       	ori	r25, 0x7F	; 127
 758:	80 e8       	ldi	r24, 0x80	; 128
 75a:	70 e0       	ldi	r23, 0x00	; 0
 75c:	60 e0       	ldi	r22, 0x00	; 0
 75e:	08 95       	ret

00000760 <__fp_nan>:
 760:	9f ef       	ldi	r25, 0xFF	; 255
 762:	80 ec       	ldi	r24, 0xC0	; 192
 764:	08 95       	ret

00000766 <__fp_pscA>:
 766:	00 24       	eor	r0, r0
 768:	0a 94       	dec	r0
 76a:	16 16       	cp	r1, r22
 76c:	17 06       	cpc	r1, r23
 76e:	18 06       	cpc	r1, r24
 770:	09 06       	cpc	r0, r25
 772:	08 95       	ret

00000774 <__fp_pscB>:
 774:	00 24       	eor	r0, r0
 776:	0a 94       	dec	r0
 778:	12 16       	cp	r1, r18
 77a:	13 06       	cpc	r1, r19
 77c:	14 06       	cpc	r1, r20
 77e:	05 06       	cpc	r0, r21
 780:	08 95       	ret

00000782 <__fp_round>:
 782:	09 2e       	mov	r0, r25
 784:	03 94       	inc	r0
 786:	00 0c       	add	r0, r0
 788:	11 f4       	brne	.+4      	; 0x78e <__fp_round+0xc>
 78a:	88 23       	and	r24, r24
 78c:	52 f0       	brmi	.+20     	; 0x7a2 <__fp_round+0x20>
 78e:	bb 0f       	add	r27, r27
 790:	40 f4       	brcc	.+16     	; 0x7a2 <__fp_round+0x20>
 792:	bf 2b       	or	r27, r31
 794:	11 f4       	brne	.+4      	; 0x79a <__fp_round+0x18>
 796:	60 ff       	sbrs	r22, 0
 798:	04 c0       	rjmp	.+8      	; 0x7a2 <__fp_round+0x20>
 79a:	6f 5f       	subi	r22, 0xFF	; 255
 79c:	7f 4f       	sbci	r23, 0xFF	; 255
 79e:	8f 4f       	sbci	r24, 0xFF	; 255
 7a0:	9f 4f       	sbci	r25, 0xFF	; 255
 7a2:	08 95       	ret

000007a4 <__fp_split3>:
 7a4:	57 fd       	sbrc	r21, 7
 7a6:	90 58       	subi	r25, 0x80	; 128
 7a8:	44 0f       	add	r20, r20
 7aa:	55 1f       	adc	r21, r21
 7ac:	59 f0       	breq	.+22     	; 0x7c4 <__fp_splitA+0x10>
 7ae:	5f 3f       	cpi	r21, 0xFF	; 255
 7b0:	71 f0       	breq	.+28     	; 0x7ce <__fp_splitA+0x1a>
 7b2:	47 95       	ror	r20

000007b4 <__fp_splitA>:
 7b4:	88 0f       	add	r24, r24
 7b6:	97 fb       	bst	r25, 7
 7b8:	99 1f       	adc	r25, r25
 7ba:	61 f0       	breq	.+24     	; 0x7d4 <__fp_splitA+0x20>
 7bc:	9f 3f       	cpi	r25, 0xFF	; 255
 7be:	79 f0       	breq	.+30     	; 0x7de <__fp_splitA+0x2a>
 7c0:	87 95       	ror	r24
 7c2:	08 95       	ret
 7c4:	12 16       	cp	r1, r18
 7c6:	13 06       	cpc	r1, r19
 7c8:	14 06       	cpc	r1, r20
 7ca:	55 1f       	adc	r21, r21
 7cc:	f2 cf       	rjmp	.-28     	; 0x7b2 <__fp_split3+0xe>
 7ce:	46 95       	lsr	r20
 7d0:	f1 df       	rcall	.-30     	; 0x7b4 <__fp_splitA>
 7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <__fp_splitA+0x30>
 7d4:	16 16       	cp	r1, r22
 7d6:	17 06       	cpc	r1, r23
 7d8:	18 06       	cpc	r1, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	f1 cf       	rjmp	.-30     	; 0x7c0 <__fp_splitA+0xc>
 7de:	86 95       	lsr	r24
 7e0:	71 05       	cpc	r23, r1
 7e2:	61 05       	cpc	r22, r1
 7e4:	08 94       	sec
 7e6:	08 95       	ret

000007e8 <__fp_zero>:
 7e8:	e8 94       	clt

000007ea <__fp_szero>:
 7ea:	bb 27       	eor	r27, r27
 7ec:	66 27       	eor	r22, r22
 7ee:	77 27       	eor	r23, r23
 7f0:	cb 01       	movw	r24, r22
 7f2:	97 f9       	bld	r25, 7
 7f4:	08 95       	ret

000007f6 <__mulsf3>:
 7f6:	0e 94 0e 04 	call	0x81c	; 0x81c <__mulsf3x>
 7fa:	0c 94 c1 03 	jmp	0x782	; 0x782 <__fp_round>
 7fe:	0e 94 b3 03 	call	0x766	; 0x766 <__fp_pscA>
 802:	38 f0       	brcs	.+14     	; 0x812 <__mulsf3+0x1c>
 804:	0e 94 ba 03 	call	0x774	; 0x774 <__fp_pscB>
 808:	20 f0       	brcs	.+8      	; 0x812 <__mulsf3+0x1c>
 80a:	95 23       	and	r25, r21
 80c:	11 f0       	breq	.+4      	; 0x812 <__mulsf3+0x1c>
 80e:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_inf>
 812:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_nan>
 816:	11 24       	eor	r1, r1
 818:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__fp_szero>

0000081c <__mulsf3x>:
 81c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__fp_split3>
 820:	70 f3       	brcs	.-36     	; 0x7fe <__mulsf3+0x8>

00000822 <__mulsf3_pse>:
 822:	95 9f       	mul	r25, r21
 824:	c1 f3       	breq	.-16     	; 0x816 <__mulsf3+0x20>
 826:	95 0f       	add	r25, r21
 828:	50 e0       	ldi	r21, 0x00	; 0
 82a:	55 1f       	adc	r21, r21
 82c:	62 9f       	mul	r22, r18
 82e:	f0 01       	movw	r30, r0
 830:	72 9f       	mul	r23, r18
 832:	bb 27       	eor	r27, r27
 834:	f0 0d       	add	r31, r0
 836:	b1 1d       	adc	r27, r1
 838:	63 9f       	mul	r22, r19
 83a:	aa 27       	eor	r26, r26
 83c:	f0 0d       	add	r31, r0
 83e:	b1 1d       	adc	r27, r1
 840:	aa 1f       	adc	r26, r26
 842:	64 9f       	mul	r22, r20
 844:	66 27       	eor	r22, r22
 846:	b0 0d       	add	r27, r0
 848:	a1 1d       	adc	r26, r1
 84a:	66 1f       	adc	r22, r22
 84c:	82 9f       	mul	r24, r18
 84e:	22 27       	eor	r18, r18
 850:	b0 0d       	add	r27, r0
 852:	a1 1d       	adc	r26, r1
 854:	62 1f       	adc	r22, r18
 856:	73 9f       	mul	r23, r19
 858:	b0 0d       	add	r27, r0
 85a:	a1 1d       	adc	r26, r1
 85c:	62 1f       	adc	r22, r18
 85e:	83 9f       	mul	r24, r19
 860:	a0 0d       	add	r26, r0
 862:	61 1d       	adc	r22, r1
 864:	22 1f       	adc	r18, r18
 866:	74 9f       	mul	r23, r20
 868:	33 27       	eor	r19, r19
 86a:	a0 0d       	add	r26, r0
 86c:	61 1d       	adc	r22, r1
 86e:	23 1f       	adc	r18, r19
 870:	84 9f       	mul	r24, r20
 872:	60 0d       	add	r22, r0
 874:	21 1d       	adc	r18, r1
 876:	82 2f       	mov	r24, r18
 878:	76 2f       	mov	r23, r22
 87a:	6a 2f       	mov	r22, r26
 87c:	11 24       	eor	r1, r1
 87e:	9f 57       	subi	r25, 0x7F	; 127
 880:	50 40       	sbci	r21, 0x00	; 0
 882:	9a f0       	brmi	.+38     	; 0x8aa <__mulsf3_pse+0x88>
 884:	f1 f0       	breq	.+60     	; 0x8c2 <__mulsf3_pse+0xa0>
 886:	88 23       	and	r24, r24
 888:	4a f0       	brmi	.+18     	; 0x89c <__mulsf3_pse+0x7a>
 88a:	ee 0f       	add	r30, r30
 88c:	ff 1f       	adc	r31, r31
 88e:	bb 1f       	adc	r27, r27
 890:	66 1f       	adc	r22, r22
 892:	77 1f       	adc	r23, r23
 894:	88 1f       	adc	r24, r24
 896:	91 50       	subi	r25, 0x01	; 1
 898:	50 40       	sbci	r21, 0x00	; 0
 89a:	a9 f7       	brne	.-22     	; 0x886 <__mulsf3_pse+0x64>
 89c:	9e 3f       	cpi	r25, 0xFE	; 254
 89e:	51 05       	cpc	r21, r1
 8a0:	80 f0       	brcs	.+32     	; 0x8c2 <__mulsf3_pse+0xa0>
 8a2:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_inf>
 8a6:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__fp_szero>
 8aa:	5f 3f       	cpi	r21, 0xFF	; 255
 8ac:	e4 f3       	brlt	.-8      	; 0x8a6 <__mulsf3_pse+0x84>
 8ae:	98 3e       	cpi	r25, 0xE8	; 232
 8b0:	d4 f3       	brlt	.-12     	; 0x8a6 <__mulsf3_pse+0x84>
 8b2:	86 95       	lsr	r24
 8b4:	77 95       	ror	r23
 8b6:	67 95       	ror	r22
 8b8:	b7 95       	ror	r27
 8ba:	f7 95       	ror	r31
 8bc:	e7 95       	ror	r30
 8be:	9f 5f       	subi	r25, 0xFF	; 255
 8c0:	c1 f7       	brne	.-16     	; 0x8b2 <__mulsf3_pse+0x90>
 8c2:	fe 2b       	or	r31, r30
 8c4:	88 0f       	add	r24, r24
 8c6:	91 1d       	adc	r25, r1
 8c8:	96 95       	lsr	r25
 8ca:	87 95       	ror	r24
 8cc:	97 f9       	bld	r25, 7
 8ce:	08 95       	ret

000008d0 <__divmodhi4>:
 8d0:	97 fb       	bst	r25, 7
 8d2:	07 2e       	mov	r0, r23
 8d4:	16 f4       	brtc	.+4      	; 0x8da <__divmodhi4+0xa>
 8d6:	00 94       	com	r0
 8d8:	07 d0       	rcall	.+14     	; 0x8e8 <__divmodhi4_neg1>
 8da:	77 fd       	sbrc	r23, 7
 8dc:	09 d0       	rcall	.+18     	; 0x8f0 <__divmodhi4_neg2>
 8de:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__udivmodhi4>
 8e2:	07 fc       	sbrc	r0, 7
 8e4:	05 d0       	rcall	.+10     	; 0x8f0 <__divmodhi4_neg2>
 8e6:	3e f4       	brtc	.+14     	; 0x8f6 <__divmodhi4_exit>

000008e8 <__divmodhi4_neg1>:
 8e8:	90 95       	com	r25
 8ea:	81 95       	neg	r24
 8ec:	9f 4f       	sbci	r25, 0xFF	; 255
 8ee:	08 95       	ret

000008f0 <__divmodhi4_neg2>:
 8f0:	70 95       	com	r23
 8f2:	61 95       	neg	r22
 8f4:	7f 4f       	sbci	r23, 0xFF	; 255

000008f6 <__divmodhi4_exit>:
 8f6:	08 95       	ret

000008f8 <__udivmodhi4>:
 8f8:	aa 1b       	sub	r26, r26
 8fa:	bb 1b       	sub	r27, r27
 8fc:	51 e1       	ldi	r21, 0x11	; 17
 8fe:	07 c0       	rjmp	.+14     	; 0x90e <__udivmodhi4_ep>

00000900 <__udivmodhi4_loop>:
 900:	aa 1f       	adc	r26, r26
 902:	bb 1f       	adc	r27, r27
 904:	a6 17       	cp	r26, r22
 906:	b7 07       	cpc	r27, r23
 908:	10 f0       	brcs	.+4      	; 0x90e <__udivmodhi4_ep>
 90a:	a6 1b       	sub	r26, r22
 90c:	b7 0b       	sbc	r27, r23

0000090e <__udivmodhi4_ep>:
 90e:	88 1f       	adc	r24, r24
 910:	99 1f       	adc	r25, r25
 912:	5a 95       	dec	r21
 914:	a9 f7       	brne	.-22     	; 0x900 <__udivmodhi4_loop>
 916:	80 95       	com	r24
 918:	90 95       	com	r25
 91a:	bc 01       	movw	r22, r24
 91c:	cd 01       	movw	r24, r26
 91e:	08 95       	ret

00000920 <_exit>:
 920:	f8 94       	cli

00000922 <__stop_program>:
 922:	ff cf       	rjmp	.-2      	; 0x922 <__stop_program>
